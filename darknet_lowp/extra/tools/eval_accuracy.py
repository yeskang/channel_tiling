# =============================================================================
# Author : Gopalakrishna Hegde
# 
# Date : Oct 15, 2017
# 
# 
# =============================================================================
from __future__ import print_function
import sys, os
import numpy as np
import argparse
from prettytable import PrettyTable
from collections import OrderedDict
from scipy.interpolate import interp1d
import matplotlib.pyplot as plt
script_dir = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, script_dir)
from voc_eval import voc_eval

def plot_stats(stats):
  classes = [cls for cls in stats]
    
  fig, ax = plt.subplots(1, 2)
  for cls in classes[:10]:
    xdata = stats[cls]['recall']
    ydata = stats[cls]['prec']
    f = interp1d(xdata, ydata)
    x = np.linspace(0, max(xdata), num=100)
    y = f(x)
    ax[0].plot(x, y)
  for cls in classes[10:]:
    xdata = stats[cls]['recall']
    ydata = stats[cls]['prec']
    f = interp1d(xdata, ydata)
    x = np.linspace(0, max(xdata), num=100)
    y = f(x)
    ax[1].plot(x, y)  

  ax[0].set_xlim([0, 1.0])
  ax[0].set_ylim([0, 1.0])
  ax[0].set_xlabel('Recall')
  ax[0].set_ylabel('Precision')
  ax[0].legend(classes[:10], loc='upper right')
  ax[1].set_xlim([0, 1.0])
  ax[1].set_ylim([0, 1.0])
  ax[1].set_xlabel('Recall')
  ax[1].set_ylabel('Precision')
  ax[1].legend(classes[10:], loc='upper right')
  
  fig.suptitle('PR Curves for floating point model on VOC 2007 testset')
  #fig.suptitle('PR Curves for 16b model on VOC 2007 testset')
  #fig.suptitle('PR Curves for 8b model on VOC 2007 testset')
  fig.tight_layout()
  plt.show()
  
def print_stats(stats):
  """
  """
  result = PrettyTable()
  classes = []
  avg_prec = []
  recall = []
  for cls_name in stats:
    classes.append(cls_name)
    avg_prec.append(stats[cls_name]['ap'])
    recall.append(stats[cls_name]['recall'][-1])
  result.add_column("Class", classes)
  result.add_column("Avg Precision", avg_prec)
  result.add_column("Recall", recall)
  avg_prec = np.array(avg_prec)
  recall = np.array(recall)
  mean_recall = np.mean(recall)
  mAP = np.mean(avg_prec)  
  print(result)
  print('mAP = {:2f}\tAvg Recall = {:2f}'.format(mAP, mean_recall))

def main(img_list, det_files, ann_dir):
  """
  """
  stats = OrderedDict()
  for det_file in det_files:        
    class_name = os.path.basename(det_file).split('.')[0].split('_')[-1]
    cache_dir = './cache'    
    rec, prec, ap = voc_eval(det_file, ann_dir, img_list, class_name, cache_dir)
    stats[class_name] = {'recall' : np.around(rec, decimals=2),
                         'prec' : np.around(prec, decimals=2),
                         'ap' : np.around(ap, decimals=2)}
  print_stats(stats)
  plot_stats(stats)

if __name__=='__main__':
  parser = argparse.ArgumentParser('Evaluate detector mAP')
  parser.add_argument('-d', '--det', dest='det', nargs='+', type=str,
                      help='Darknet detection file generated by detector'
                      'valid command')
  parser.add_argument('-l', '--imlist', dest='imlist', type=str,
                      help='File containing list of images to evaluate')
  parser.add_argument('-a', '--ann_dir', dest='ann_dir', type=str,
                      help='Annotation directory containing XML annotation'
                      'files in the VOC format.')
  
  args = parser.parse_args()
  print_help = False
  if args.det == None:
    print('Detection file not specified')
    print_help = True
  if args.imlist == None:
    print('Image list file not specified')
    print_help = True
  if args.ann_dir == None:
    print('Annotation directory not specified')
    print_help = True    
    
  if print_help:
    parser.print_help()
    sys.exit()
  main(args.imlist, args.det, args.ann_dir)